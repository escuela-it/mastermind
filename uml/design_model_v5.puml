@startuml design_model_v5

skin rose

' definiciones


class MasterMind {
    + void play()
}

package Interfaces {
    abstract class GameViewInterface {
        + draw()
        + void reset()
    }

    abstract class TitleViewInterface {
        + draw()
    }

    abstract class BoardViewInterface {
        + draw()
    }

    abstract class AttempsViewInterface {
        + void draw(int attemp)
    }

    abstract class ProposedCombinationViewInterface {
        + void draw(String proposedCombination, ResultCombination resultCombination)
    }

    abstract class AskCombinationViewInterface {
        + String interact()
        - bool _isLengthDataValid(String? data)
        - bool _isDataCorrect(String data)
    }

    abstract class ResumeViewInterface {
        + bool interact()
    }

    abstract class FinishViewInterface {
        void draw(bool win, String secretCombination)
    }
}

package ConsoleViews {
}

package GraphicViews {
}

package Controllers {
    class PlayController {
        + void play()
    }
    class ResetController {
        + void reset()
    }
    class ResumeController {
        + void interact()
    }
}

package Models {

    class Game {
        + bool isFinished()
        + String getProposedCopmbination(int i)
        + ResultCombination getResultCombination(int i)
        + void addProposedCombiantion(String proposedCombination)
        + void addResultCombination()
        + void incrementAttemp()
        + int getAttemp()
        + int proposedCombinationsLength()
        + void reset()
        + bool isWin() 
        + String getSecretCombination()


    }

    class ProposedCombination {

    }

    class SecretCombination {
        + void random()
        + int calculateBlacks(String proposedCombination)
        + int calculateWhites(String proposedCombination) 
        + String get()
    }

    class ResultCombination {
        + bool isCorrect()
        + int getBlacks()
        + int getWhites()
    }

    class Resume {
        + void setResponse(String response)
        + bool isResponseCorrect()
        + bool isResumed()
    }

    class Attemp {}
}

package Utils {
    abstract class Console {
       {static} void write(Object? object, {bool padding = false})
       {static} void writeInLine([Object? object = ""])
       {static} String? read()
       {static} String? ask(String question)
    }

    abstract class Values {
        {static} const colors = 'rbygop' : const
        {static} const wbColors = 'wb'
        {static} const totalAttemps = 10
        {static} const combinationLength = 4
    }
     
}

'relations


MasterMind *--> ResumeViewInterface
MasterMind *--> GameViewInterface

ResumeViewInterface --> ResumeController

GameViewInterface *--> ResetController
GameViewInterface *--> PlayController
GameViewInterface *--> TitleViewInterface
GameViewInterface *--> BoardViewInterface

BoardViewInterface *--> PlayController
BoardViewInterface *---> AttempsViewInterface
BoardViewInterface *--> ProposedCombinationViewInterface
BoardViewInterface *--> AskCombinationViewInterface
BoardViewInterface *--> FinishViewInterface

Interfaces <|-- ConsoleViews
Interfaces <|-- GraphicViews

PlayController *--> Game

ResetController *--> Game
ResumeController *--> Resume

Game *--> SecretCombination
Game *--> "  n  " ResultCombination
Game *--> "  n  " ProposedCombination
Game *--> Attemp

MasterMind ..> Utils

@enduml